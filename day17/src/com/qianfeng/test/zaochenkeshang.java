package com.qianfeng.test;
/*
 * 问题描述:假设现有容量10kg的背包，另外有3个物品，分别为a1，a2，a3。物品a1重量为3kg，价值为4；
 * 物品a2重量为4kg，价值为5；物品a3重量为5kg，价值为6。要怎么样放才能保证背包中物品的总价值最大？
 
 -------------------------------------------------------------------------------
  	最大容量	物品个数
  	10		3				总价值 | 0	1	2	3	4	5	6	7	8	9	10 -->背包容量
  	物品重量	物品价值		 	 0   | 0	0	0	0	0	0	0	0	0	0	0	 
  	3		4			 	 1	 | 0	0	0	4	4	4	4	4	4	4	4   
  	4		5			  	 2   | 0	0	0	4	5	5	5	9	9	9	9
  	5		6			  	 3   | 0	0	0	4	5	6	6	9	10	11	11
  							放入物品
  							件数
 ------------------------------------------------------------------------------
 		其中Xi为携带第i件物品的数量,Ai表示物品的重量
 抽象为	max = C1(X1)+C2(X2)+....+Ci(Xi)
 		{
 			A1*X1+A2*X2+.....+AiXi <= m
 			Xi = 0或1,	i=0,1,2.....
 		}
 		m 表示背包的最大容量
        n 表示物品个数
        w 表示物品重量数组
        v 表示物品价值数组
 		w[i]: 第i个物品的重量
　 	      　 v[i]: 第i个物品的价值；
　	     　c[i][m] ： 前i个物体放入容量为m的背包的最大价值；

　　	   c[i-1][m] ： 前i-1个物体放入容量为m的背包的最大价值；

　　          c[i-1][m-w[i]] ： 前i-1个物体放入容量为m-w[i]的背包的最大价值；

　　由此可得：
　　　　　　c[i][m]=max{c[i-1][m-w[i]]+vi , c[i-1][m]}
 */
public class zaochenkeshang {
    public static void main(String[] args) {
        int m = 10;//背包最大容量
        int n = 3;//物品的个数
        int w[] = {3, 4, 5};  //物品的重量数组   
        int v[] = {4, 5, 6};//物品的价值数组
        int c[][] = backPack_Solution(m, n, w, v);
        
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                System.out.print(c[i][j]+"\t");
            }
            System.out.println();
        }

    }

 /**
     * @param m 表示背包的最大容量
     * @param n 表示物品个数
     * @param w 表示物品重量数组
     * @param p 表示物品价值数组
 */
    public static int[][] backPack_Solution(int m, int n, int[] w, int[] v) {
        //c[i][j]表示前i件物品恰放入一个重量为m的背包可以获得的最大价值
        int c[][] = new int[n + 1][m + 1];
        for (int i = 0; i < n + 1; i++)
            c[i][0] = 0;//当背包承重为0时,无论放什么价值都是0
        for (int j = 0; j < m + 1; j++)
            c[0][j] = 0;//当放入0件物品时,无论背包有多大价值都是0

        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < m + 1; j++) {
                //当背包重量为j时，如果第i件的重量(w[i-1])小于重量j时，c[i][j]为下列两种情况之一：
                //(1)物品i不放入背包中，所以c[i][j]为c[i-1][j]的值
                //(2)物品i放入背包中，则背包剩余重量为j-w[i-1],所以c[i][j]为c[i-1][j-w[i-1]]的值加上当前物品i的价值
                if (w[i - 1] <= j) {
                    if (c[i - 1][j] < (c[i - 1][j - w[i - 1]] + v[i - 1]))
                        c[i][j] = c[i - 1][j - w[i - 1]] + v[i - 1];
                    else
                        c[i][j] = c[i - 1][j];
                } else
                    c[i][j] = c[i - 1][j];
            }
        }
        return c;
    }
}