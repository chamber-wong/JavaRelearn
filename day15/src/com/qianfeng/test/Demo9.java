package com.qianfeng.test;
/*
 * 多线程:
 * 程序:一个可执行的文件
 * 进程:一个正在运行的程序.也可以理解成在内存中开辟了一块儿空间
 * 线程:负责程序的运行,可以看做一条执行的通道或执行单元,所以我们通常将进程的工作理解成线程的工作
 * 
 * 进程中可不可以没有线程?   必须有线程,至少有一个.当有一个线程的时候我们称为单线程(唯一的线程就是主线程).
 *                当有一个以上的线程同时存在的时候我们称为多线程.
 *                
 * 多线程的作用:为了实现同一时间干多件事情.
 * 
 * 任务区:我们将线程工作的地方称为任务区.
 * 每一个线程都有一个任务区,任务区通过对应的方法产生作用.
 * 
 * JVM默认是多线程吗?
 * 至少要有两个线程:
 * 主线程:任务区:main函数
 * 垃圾回收线程:任务区:finalize函数
*/
public class Demo9 {
	public static void main(String[] args) {
		new Test();
		
		//手动执行gc方法,运行垃圾回收器,触发垃圾回收机制
		/*
		 * 原理:当执行gc的时候,会触发垃圾回收机制,开启垃圾回收线程,调用finalize()方法.
		 * 注意点:多个线程之间是抢CPU的关系,线程之间有随机性.
		 */
		System.gc();
		//当执行到这里的时候,正常情况下有两个线程:主线程和垃圾回收线程
		System.out.println("main");
	}//线程是随着任务的开始而开始结束而结束.只要任务没有结束,线程就不会结束.当线程还在工作的时候,进程没有办法结束.
}

class Test{
	/*
	 * finalize()方法应该由系统调用,为了模拟多线程的环境,我们将它进行了重写
	 * 正常情况下,当Test类的对象被释放的时候,finalize方法会被自动调用.
	 * @see java.lang.Object#finalize()
	 */
	protected void finalize() throws Throwable {
		System.out.println("finalize()");
	}
}
